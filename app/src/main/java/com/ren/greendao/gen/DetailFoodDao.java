package com.ren.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.ren.cook.database.MaterialConverter;
import com.ren.cook.database.ProcessConverter;
import java.util.List;

import com.ren.cook.bean.DetailFood;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DETAIL_FOOD".
*/
public class DetailFoodDao extends AbstractDao<DetailFood, Long> {

    public static final String TABLENAME = "DETAIL_FOOD";

    /**
     * Properties of entity DetailFood.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Classid = new Property(0, long.class, "classid", false, "CLASSID");
        public final static Property Process = new Property(1, String.class, "process", false, "PROCESS");
        public final static Property Preparetime = new Property(2, String.class, "preparetime", false, "PREPARETIME");
        public final static Property Material = new Property(3, String.class, "material", false, "MATERIAL");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
        public final static Property Id = new Property(5, long.class, "id", true, "_id");
        public final static Property Rating = new Property(6, float.class, "rating", false, "RATING");
        public final static Property Pic = new Property(7, String.class, "pic", false, "PIC");
        public final static Property Tag = new Property(8, String.class, "tag", false, "TAG");
        public final static Property Peoplenum = new Property(9, String.class, "peoplenum", false, "PEOPLENUM");
        public final static Property Content = new Property(10, String.class, "content", false, "CONTENT");
        public final static Property Cookingtime = new Property(11, String.class, "cookingtime", false, "COOKINGTIME");
    };

    private final ProcessConverter processConverter = new ProcessConverter();
    private final MaterialConverter materialConverter = new MaterialConverter();

    public DetailFoodDao(DaoConfig config) {
        super(config);
    }
    
    public DetailFoodDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DETAIL_FOOD\" (" + //
                "\"CLASSID\" INTEGER NOT NULL ," + // 0: classid
                "\"PROCESS\" TEXT," + // 1: process
                "\"PREPARETIME\" TEXT," + // 2: preparetime
                "\"MATERIAL\" TEXT," + // 3: material
                "\"NAME\" TEXT," + // 4: name
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 5: id
                "\"RATING\" REAL NOT NULL ," + // 6: rating
                "\"PIC\" TEXT," + // 7: pic
                "\"TAG\" TEXT," + // 8: tag
                "\"PEOPLENUM\" TEXT," + // 9: peoplenum
                "\"CONTENT\" TEXT," + // 10: content
                "\"COOKINGTIME\" TEXT);"); // 11: cookingtime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DETAIL_FOOD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DetailFood entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getClassid());
 
        List process = entity.getProcess();
        if (process != null) {
            stmt.bindString(2, processConverter.convertToDatabaseValue(process));
        }
 
        String preparetime = entity.getPreparetime();
        if (preparetime != null) {
            stmt.bindString(3, preparetime);
        }
 
        List material = entity.getMaterial();
        if (material != null) {
            stmt.bindString(4, materialConverter.convertToDatabaseValue(material));
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
        stmt.bindLong(6, entity.getId());
        stmt.bindDouble(7, entity.getRating());
 
        String pic = entity.getPic();
        if (pic != null) {
            stmt.bindString(8, pic);
        }
 
        String tag = entity.getTag();
        if (tag != null) {
            stmt.bindString(9, tag);
        }
 
        String peoplenum = entity.getPeoplenum();
        if (peoplenum != null) {
            stmt.bindString(10, peoplenum);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(11, content);
        }
 
        String cookingtime = entity.getCookingtime();
        if (cookingtime != null) {
            stmt.bindString(12, cookingtime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DetailFood entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getClassid());
 
        List process = entity.getProcess();
        if (process != null) {
            stmt.bindString(2, processConverter.convertToDatabaseValue(process));
        }
 
        String preparetime = entity.getPreparetime();
        if (preparetime != null) {
            stmt.bindString(3, preparetime);
        }
 
        List material = entity.getMaterial();
        if (material != null) {
            stmt.bindString(4, materialConverter.convertToDatabaseValue(material));
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
        stmt.bindLong(6, entity.getId());
        stmt.bindDouble(7, entity.getRating());
 
        String pic = entity.getPic();
        if (pic != null) {
            stmt.bindString(8, pic);
        }
 
        String tag = entity.getTag();
        if (tag != null) {
            stmt.bindString(9, tag);
        }
 
        String peoplenum = entity.getPeoplenum();
        if (peoplenum != null) {
            stmt.bindString(10, peoplenum);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(11, content);
        }
 
        String cookingtime = entity.getCookingtime();
        if (cookingtime != null) {
            stmt.bindString(12, cookingtime);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 5);
    }    

    @Override
    public DetailFood readEntity(Cursor cursor, int offset) {
        DetailFood entity = new DetailFood( //
            cursor.getLong(offset + 0), // classid
            cursor.isNull(offset + 1) ? null : processConverter.convertToEntityProperty(cursor.getString(offset + 1)), // process
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // preparetime
            cursor.isNull(offset + 3) ? null : materialConverter.convertToEntityProperty(cursor.getString(offset + 3)), // material
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // name
            cursor.getLong(offset + 5), // id
            cursor.getFloat(offset + 6), // rating
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // pic
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // tag
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // peoplenum
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // content
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // cookingtime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DetailFood entity, int offset) {
        entity.setClassid(cursor.getLong(offset + 0));
        entity.setProcess(cursor.isNull(offset + 1) ? null : processConverter.convertToEntityProperty(cursor.getString(offset + 1)));
        entity.setPreparetime(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMaterial(cursor.isNull(offset + 3) ? null : materialConverter.convertToEntityProperty(cursor.getString(offset + 3)));
        entity.setName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setId(cursor.getLong(offset + 5));
        entity.setRating(cursor.getFloat(offset + 6));
        entity.setPic(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTag(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPeoplenum(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setContent(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCookingtime(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DetailFood entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DetailFood entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
